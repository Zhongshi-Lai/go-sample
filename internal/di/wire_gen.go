// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/gin-gonic/gin"
	"go-sample/internal/server"
	"go-sample/internal/service"
	"go-sample/internal/service/sample"
	"go-sample/pkg"
	"google.golang.org/grpc"
)

// Injectors from wire.go:

func InitializeApp() (*App, func(), error) {
	engine := server.NewGinServer()
	tools := pkg.NewAllTools()
	yourServiceServer := sample.NewYourServiceServer(tools)
	allService := service.NewAllService(yourServiceServer)
	grpcServer := server.NewGRPCServer(allService)
	app, err := newApp(engine, grpcServer)
	if err != nil {
		return nil, nil, err
	}
	return app, func() {
	}, nil
}

// wire.go:

type App struct {
	GinServer  *gin.Engine
	GRPCServer *grpc.Server
}

func newApp(ginServer *gin.Engine, grpcServer *grpc.Server) (*App, error) {
	return &App{
		GinServer:  ginServer,
		GRPCServer: grpcServer,
	}, nil
}
